

#1.3 What is Node.js 

    브라우저 밖에서 js를 사용할 수 있도록 만든 것

#1.4 What is NPM  

    NPM은 Node.js의 패키지 매니저, Node.js와 같이 설치됨

#2.0 Your First NodeJS Project 

    .json 은 파일에 정보를 저장하기 위한 것

    ctrl + ` 단축키를 눌러 terminal을 열고 git init 명령어를 입력한다.
    github에서 새 repository를 만든 후 경로를 복사한뒤 터미널에 git remote and origin '경로' 를 입력한다.
    이제 git과 연결될 것이고, git은 파일의 변화를 감지하는 프로그램을 의미한다.
    이후 npm init을 터미널에 입력한다.
    npm init은 package.json을 생성하며 
    package.json에는 다양한 정보가 들어있고main은 프로젝트의 대표파일을 의미한다.

#2.1 Installing Express

    package.json 파일의 scripts안에 정의한 내용을 실행 시킬 수 있다.
    ex) "scripts": {
            "win": "node index.js"
        },

        package.json이 있는 Terminal에서 npm run win 입력.
        package.json이 없으면 작동 안함

        npm install express 또는 npm i express 로 패키지 설치 가능

        express 설치 시 작동에 필요한 다른 패키지들도 설치 됨
        express폴더 내 package.json의 dependencies에서 확인 가능

#2.2 Understanding Dependencies

    터미널에서 npm i를 입력하면 package.json 안의 dependencies를 읽어서 자동으로 설치해준다
    공유 프로젝트 할때 모든 패키지를 공유하지 않아도 되는 이점이 있다.
    package-lock.json은 패키지를 안전하게 관리해준다. (버전과 패키지 목록)
    npm install 할때는 반드시 package.json을 닫고 실행해야함. -> npm이 package.json 파일을 수정하기 때문

#2.3 The Tower of Babel 

    nodeJS가 이해하지 못하는 최신 js를 쓸때 babel을 사용하면 컴파일을 해줌

    babel 설치 방법
    npm install --save-dev @babel/core

    package.json에 보면 devDependencies 안에 설치된다.

    dependencies는 프로그램을 실행시키기 위한 package
    devDependencies는 개발자를 위한 dependencies

    설치 시--save-dev라는 명령어와 같이 설치하면 devDependencies안에 작성됨

    npm install @babel/preset-env --save-dev
    설치 후 아래 작업 수행

    touch babel.config.json (touch 명령어는 mac과 linux에서 작동됨)

    babel.config.json 파일 내부에 아래와 같이 입력 
    {
    "presets": ["@babel/preset-env"]
    }

    


