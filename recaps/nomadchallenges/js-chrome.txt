#2.0 Your First JS Project

    browswer에서 inspect -  Console에서 js 사용가능.
    browswer에 js는 내장되어있다.
    브라우저가 js을 실행하게 만드는 방법 : css처럼 html을 통해서 body 안에 작성
    ex)  <body> <script src="app.js"></script> </body>
    
    잘못된 코드는 Console에 들어가서 확인 가능

#2.1 Basic Data Types

    integer : 정수 
    ex) 1, 2 ,3 

    float : 소수 
    ex) 1.1, 1.23, 23.43

    string : text를 ""안에 쓴다, "로 열었으면 "로 닫고 '로 열었으면 '로 닫는다 섞어서는 x
    ex) "hello" + "Koo"

#2.2 Variables

    console.log(535353); 을 통해 콘솔에 ()안의 정보 출력

    js도 html과 마찬가지로 위에서 아래로 읽는다.

    const a = 5; 로 변수 사용 constant(상수)라는 의미
    = 뒤에 넣는 타입에 따라 변수 type 적용

    js에서는 camel 표기법 사용 
    ex) const veryLongVariableName = 0;

#2.3 const and let

    변수만들때 let, const, var차이
    let : 재선언 금지, 재할당 가능
    const : 재선언 금지, 재할당 금지
    var : 재선언 가능, 재할당 가능

    const를 default로 사용하고 변수의 업데이트가 필요할때만 let으로 사용하는것이 좋다
    const와 let은 새로 생긴 것이며 js는 원래 var를 사용했었음

#2.4 Booleans

    boolean : true, false 두 가지 값만 존재
    ex) const amIFat = true;

    null : 변수에 아무것도 없다. 값이 없음을 알리기 위해 의도적으로 채워진 값
    ex) let something = null;
    undefined : 정의되지 않음. 메모리상에 공간은 존재하지만 값이 채워지지 않은 것
    ex) let something;

#2.5 Arrays

    array는 [] 안에 data를 넣어서 사용, type의 종류에 상관 없이 항목을 쉼표로 분리
    ex) const daysOfWeek = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]

    array의 데이터에 접근할 때는 arrayName[index] 첫번째 data의 index는 0부터 시작
    ex) 5번째 fri 출력 하려면 console.log(daysofWeek[4]);

    주석사용 방법 : //로 시작

    array.push(data); 로 array에 데이터 추가 할 수 있음

#2.6 Objects

    const player = {
        name: "Koo",
        points: 10,
        fat: false;

    object는 위와 같은 형태로 변수타입과 변수명 오른쪽에 중괄호{} 를 이용해 작성한다.
    내부 프로퍼티들은 ,로 구분한다.

    property를 불러오는 방법은 2가지가 있다.
    1. console.log(player.name); 
    2. console.log(player["name"]); 

    const object안의 무언가는 수정할 수 있다.
    ex) player.name = false; 
    
    const object 자체를 변경하려고 하면 에러가 발생.
    ex) player = false; => error
    
    const object에 새로운 property를 추가하는것은 가능하다.
    ex) player.lastname = "potato";

#2.7 Functions part One

    function : 계속해서 쓸 수있는 코드 조각을 의미함. c#에서는 method
    argument란 function을 실행하는 동안 funtion에게 보내고 받는 데이터. ()안에 작성


    ex) 
    function sayHello(nameOfPerson, age) {
        console.log("Hello my name is " + nameOfPerson + age);
    }

    sayHello("koo",28);

#2.8 Functions part Two 

    argument는 function 안에서만 존재.
    nameOfPerson은 string, age 는 int

    NaN : not a number 숫자가 아님 이라는 뜻

    argument의 이름은 상관없다. 호출하는곳의 ()안의 순서대로 function ()에 대입됨


    ex) property로 사용 가능
        const player = {
            name: "nico",
            sayHello: function(otherPersonsName){
                console.log("hello!" + otherPersonsName + "nice to meet you");
            }
        }

        console.log(player.name);
        player.sayHello("lynn");

        => hello lynn nice to meet you!

#2.11 Returns

    fuction 외부로 반환하는 값. return을 하는 순간 function은 종료
    ex) function calculateKrAge(ageOfForeigner){
            return ageOfForeigner +2;
        }

#2.13 Conditionals

    conditionals : 조건문

    prompt()는 js를 잠시 pause

    typeof variable 로 타입 확인 가능

    parseInt() : string을 Int로 변환, 문자를 argument로 넣으면 NaN을 반환

#2.14 Conditionals part Two

    isNaN() 은 NaN 여부를 boolean으로 return

    cnodition은 항상 boolean이어야 함

    if(condition){
        // condition == true
    }
    else{
        // condition == false
    }

#2.15 Conditionals part Three

    operator 
        && : and
        || : or

#2.16 Recap

    operator
        === : check equal
        !== : check not equal

#3.0 The Document Object

    js에서 html을 가져오고 변경 할 수 있다.
    ex) document.title = "Hi";

#3.1 HTML in Javascript 

    id 통해 elemenet 가져오는 방법 : document.getElementById("idname");

#3.2 Searching For Elements 

    class name 통해 여러개 element 가져오는 방법 : getElementsByClassName
    ex) document.getElementsByClassName("ClassName");

    css 방식으로 검색 할수있는 function : querySelector 
    ex) document.querySelector(".hello h1"); 
        document.querySelector("#hello"); 
    같은 조건이 여러개 있을때 첫번째 element만 가져온다.

    여러개 가져오는 function : querySelectorAll
    ex) document.querySelectorAll(".hello h1");

    querySelector로 대부분의 element를 가져오게 될 것

#3.3 Events

    document HTML 파일에 app.js가 import되어있기 때문에 browswer를 통해 접근이 가능한 것

    대부분의 js가 하는일은 event를 listen 하는 것 

    ex) const title = document.querySelector("div.hello:first-child h1");

        function handleTitleClick(){
            console.log("title was clicekd!");
        }
        
        title.addEventListner("click", handleTitleClick)

    addEventListner 애 첫번째 argument에는 어떤 이벤트를 listen 하고싶은지 명시해야하고
    두번째 arguement에 넘겨주는 function은 ()를 쓰지않고 이름만 쓴다.
    이렇게하면 event가 발생했을때 js가 대신 function을 실행시켜준다.

#3.4 Events part Two

    console.dir(object);를 통해서 property와 event 확인 가능

    sytle은 css가 하는 것이 좋다

#3.5 More Events

    title.addEventListner("click", handleTitleClick
    대신에 title.onclick = handleTitleClick; 으로도 가능
    addEventListner를 선호하는 이유는 나중에 remove로 지울 수 있어서

    fuction handleWindowResize(){
        document.body.style.backgroundColor = "tomato";
    }


    document.body만 가져올 수 있음. document.div 이런건 안됨
    나머지 element들은 querySelector나 getElementById로 불러와야됨

    창 크기 변경됐을때 이벤트
    ex) window.addEventListner("resize", handleWindowResize);

    
#3.6 CSS in Javascript

    if - else문
    ex) const h1 = document.querySelector(".div.hello:first-chile h1");

        function handleTitleClick() {
        const currentColor = h1.style.color;
        let newColor;
        if (currentColor === "blue") {
            newColor = "tomato";
        } else {
            newColor = "blue";
        }
        h1.style.color = newColor;
        }

    js에서 css 수정하는것은 선호하지 않음.

#3.7 CSS in Javascript part Two

    css에서 작성한 class에 대한 내용을 js로 전달 할 수 있다.
    ex) style.css
            h1 {
                color: cornflowerblue;
                transition: all .4s ease-in-out;
            }

            .active {
            color: tomato;
            }

        app.js
            function handleTitleClick() {
                h1.className = "active";
            }

    className은 getter and setter
        if (h1.className === "active"){
            h1.className= "";
        }else{
            h1.className = "active";
        }


    개발자가 지은 이름 : raw value 의 스펠링을 틀리면 작동하지 않는 부분을 찾기 힘듬
    => 따라서 반복되는 string은 변수로 저장해서 사용하는게 좋다.
        const activeClass = "acvitve";

    js로 class를 삭제 하는것은 좋지 않음.

#3.8 CSS in Javascript part Three   

    classList.contains로 클래스 가지고 있는지 확인
    if (h1.classList.contains(clickedClass)){
        h1.classList.remove(clickedClass);
    }
    else{
        h1.classList.add(clickedClass);
    }

    classList.toggle("className") => true면 className Remove, false면 add