#1 INTRODUCTION
#1.5 What is Website

    Website is just Text

    website is made of 2 or 3 language
    first language is HTML for content
    seond language is CSS for design
    last language is Javascript for interactivity

    HTML, CSS are not programming language

#1.6 What is HTML

    HTML means Hypertext Marrkup language
    Browser doesn't understand human language
    we need to explain browser how is our browser structure with HTML
    HTML is only language that can explain what is the content of website to the browser

#1.7 What is CSS

    CSS means Cascadin Style Sheets
    CSS should be used with HTML
    CSS is to tell browser how does website content look like

#1.8 What is Javascript

    Javascript is brain of website
    Javascript is programming language

#2LEARNING HTML
#2.0 Our First HTML File

    Folder name should always be lowercase!
    file name also should always be lowercase!

#2.1 Setup and Errors

    VSC Extension Program
    - WakeTime 
    - Community Material Theme
    - Material Icon Theme
    - Prettier

    Browser doesn't tell the HTML file has error

#2.2 Our First HTML Tag

    Browser knows content between HTML Tag
    write "/" at the beginning of close Tag 
    ex) <div></div>
    HTML Tag must be closed with close Tag

    h1 tag means header No.1

    Do not remember or memorize HTML Tag

#2.3 More Tags and Prettier

    two kinds of list on HTML
    - Orderd list : 12345, ex) <ol></ol>
    - Unordered list : 15243 , ex) <ul></ul>

    command(ctrl) + D make cursur to same words

    Prettier Setting 
    - Settings - format on save Check

#2.4 Tag Attributes

    Attributes is basically add information to a text.
    Any attributes can be added.
    But the browser is not going to understand not exist attributes.
    attributes can only be combine with the tag that has that attribute.
    some tags share attribute. some tags do not.
    Attributes must always use double quotes. 
    ex) <div id="box"> </div>


    <a> tag means anchor, like link.
    Anchor is basically a way going to another website.
    href attribute means HTTP reference. href can only be combine with anchor.
    target attribute determines where href is opened.
    ex) <a href="http://goggle.com">Go to google.com</a>

    <img/> is img tag.
    it doesn't have closing tag like </img>. 
    it is self closing tag. looks like this <img />
    because img doesn't have content.
    the only img tag has src attribute. 
    the src need image source link and puts it in the image

#2.5 More Tags and Head

    local image source should be write path notation like <img src="img/logo.img" />

    HTML has rule that must be followed.
    1. first line must be <!DOCTYPE html>
        it means informing the browser that this file is HTML file
    2. between <html> and </html> is going to be html code
    3. websites have two parts. head and body
        - head is where configure the website. do setting invisible settings.
            ex) <title>Home - My first website.</title> is shown title on tab 
        - body is where the content is shown we put on the website. 

#2.6 Its All About the Head 

    <meta> tags are means extra data. they have two attribute. name and content.
    meta tags are self closing tags.

#2.7 More Tags

    Use MDN when search html,css,js

    Do not memorize all tags and attributes!

#2.8 Form Tags 

    <form> tag is submiting information group of input or file ...
    input tag has many types.

#2.9 More Tags and IDs

    label works together with the input.
    <input> tag should have id attribute. 
    for="" in <label> and id="" in <input> must be same.
    if click the label we can type in input.

    id must be unique in the whole document.
    the purpose using id is to identify the element when using scripting or css.
    All element have only one id.

#2.10 Semantic HTML

    <div> tag is most generic box container.
    boxes can not exist next to each other.

    Semantic tag means basically the meaning tracking by looking a document
    ex) <header>, <main>, <footer>, <address>...
    those tags equal <div>. but we can easily understand the meaning.

    <span> is for short text
    <p> means paragraph. it is for long text.

#2.11 Recap

    HTML is the bone. CSS is the muscle. Javascript is the brain.
    HTML is made of tags. browser can't understand undefined tag.

    Tag consist of opening tag and closing tag.
    A closing tag starts with "/" and must be same words as opening tag
    ex) <div> </div>

    tags can have many attributes. 
    Attributes must always use double quotes. 
    ex) <div id="box"> </div>

    any tags can have id.
    some attribute can be used for every tags. but some attribute can be used for certain tag.

    <div> is most generic box container.
    but we want to have meaning when we writing the code.
    We understand by read the code.
    so we need to use segmantic tag.

    head is configure the website. it is invisible on website.

    use more often tags are <header>, <main>, <footer>, <navigation>, <sidebar>, 

#3 LEARNING CSS
#3.0 How to Add CSS to HTML

    CSS를 추가하는 방법은 2가지가 있다.

    1. put <style> in <head>

    2. put <link> in <head>
        ex) <link rel="stylesheet" href="style.css" />
        
    Best way is 2.

#3.1 Writing Our First CSS Lines

    CSS will point to an HTML code.

    pointing is called selector.
    selector has many propertys.
    to group propertys using curly bracket { }

    CSS propertys has the following syntax.
        1. property name can't contain spaces, underbar(_) and slash(/)
        2. close by semicolon(;)
            ex)property-name: property-value;
            ex)font-size: 20px;

        3. value에는 아무거나 넣을 수 있지만 속성에 맞는 값을 넣어야 브라우저에서 작동된다.

    모든 property를 다 기억할 필요는 없다

#3.2 What Does Cascading Mean

    CSS의 C는 Cascading. CSS는 브라우저가 위에서부터 아래로 읽는다는 의미.
    따라서 코드가 겹칠 때 가장 마지막 코드가 적용된다.

#3.3 Blocks and Inlines

    CSS로 pointing 한 Tag는 개수에 상관없이 모두 적용된다.

    block : 같은 줄에 여러 element 올 수 없는 element
    ex) <div>, <p>, <address>...

    inline : 블럭의 반대로 같은 줄에 여러개 element가 올 수 있다.
    ex) <span>, <a>, <img>, <link> ...

    block이 아닌 inline을 기억하는 것이 편하다.

#3.4 Margin Part One

    block과 inline은 display property를 사용해 서로 바꿀 수 있다
    ex) span { display: block; }, div { display: inline; }

    inline은 height, width property를 가질 수 없다.
    inline don't have height, width property.

    boxes have three propertys ( margin, border, padding )

    margin is space from the border of the box to the outside.

#3.5 Margin Part Two

    값 1개일때 모든방향 적용
        ex) margin: 10px;
    값 2개일떄 위아래, 오른쪽아래 적용.
        ex) margin : vertical(top, bottmom) horizontal(right, left);
    값 4개일때 clockwise 순서대로 적용. 
        ex) margin : top right bottom left; 

    collapsing margins :  https://velog.io/@raram2/CSS-%EB%A7%88%EC%A7%84-%EC%83%81%EC%87%84Margin-collapsing-%EC%9B%90%EB%A6%AC-%EC%99%84%EB%B2%BD-%EC%9D%B4%ED%95%B4

#3.6 Paddings and IDs

    padding is space from the border of the box to the inside.

    값 개수에 따라 적용되는 방향은 margin과 동일

    id를 가리킬떄는 #id {} 형태로 사용사용

#3.7 Border 

    border는 거의 한종류만 사용

    * selector는 모든 element에 적용됨

#3.8 Classes

    inline은 좌 우로만 margin을 가질 수 있음. 
    좌우도 갖게 하려면 block으로 변경해야함.

    class를 가리킬 때는 .class {} 형태로 사용
    한 element가 여러개의 class를 가질 수 있다 <=> id는 한개만 가질 수 있음
    ex) <span class="btn teal">hello</span>

#3.9 Inline Block
    
    div와 같은 block을 display: inline-block; 으로 적용하게 되면 width와 height을 갖는 inline으로 사용가능
    하지만 반응형 디자인이 지원되지 않는 단점 존재. 따라서 잘 안씀

#3.10 Flexbox Part One

    inline block의 문제를 해결하기위해 flexbox 사용
    flex는 부모에게 명시한다. 
        ex) display: flex;
    flex container는 두개의 축 가지고있음
        1. main axis : horizontal
        2. cross axis : vertical

    justify-content property는 main axis에 적용됨
    align-item property는 cross axis에 적용됨
    부모가 height를 가지고 있지 않으면 align-item은 작동 x
    height: 100vh; 에서 v는 viewport를 의미하고 100vh는 화면 높이의 100%

#3.11 Flexbox Part Two

    flex-direction property를 사용하여 main axis와 cross axis을 변경 할 수 있다.
    flex-direction: row; 가 기본
    flex-direction: column; 하면 main과 cross axis가 반전됨
    flex-direction: row-reverse; 오른쪽에서 왼쪽으로 element 배치
    flex-direction: colomn-reverse; 밑에서부터 위로 element 배치

    flex-wrap은 element의 wrapping 옵션 설정 가능.
    default는 flex-wrap: nowrap; 화면에 맞게 children element의 width, height 조절됨
    flex-wrap: wrap;은 children element의 width, height를 조절하지 않음

    flex box practice site : https://flexboxfroggy.com/#ko

#3.12 Fixed

    position: static; 
    - position property's default 

    position: fixed; 
    - 화면을 스크롤해도 처음 생성된 위치에 고정되고 제일 상단의 레이어로 이동됨

#3.13 Relative Absolute 

    position: relative; 
    - top, left, right, bottom 사용해서 element 이동 시킬 때 처음생성된 위치가 기준이 됨

    position: absolute;
    - 가장 가까운 positon: relative;인 부모 element 기준으로 이동

#3.14 Pseudo Selectors part One

    pseudo selector란 좀 더 세부적으로 element를 선택할 수 있게 해준다.

    selector:option 형태로 사용한다
    ex) div:first-child {}, span:nth-child(2) {}, span:nth-child(even) {}, 
        span:nth-child(odd) {}, span:nth-child(3n+1) {},

#3.15 Combinators 

    selector에 부모와 자식을 이어서 써주면 부모의 안에있는 자식 element를 찾을 수 있다
    ex) p span {} - p안에 있는 span을 pointing, body p span {}

    부모의 바로 밑 자식을 pointing하고 싶을때는 > 을 사용
    ex) div > span {}

    특정 element 바로 다음으로 오는 형제 element를 찾을때는 +를 사용
    ex) p + span {}

#3.16 Pseudo Selectors part Two

    특정 element의 형제 element를 찾을때는 ~ 사용
    ex) p ~ span {}

    attribute selector  
    - attribute를 사용해 selecting
    ex) input[placeholder="username"] {}
    *= is 'contains'
    *= "hello" 라고 하면 ㅁㄴㅇㄹㄴㅇㄹhelloㅁㄴㅇㄹㄴㅇㄹ 라고 줘도 선택됨.
    ~ = is 'exactly'
    ~= "hello" 라고 하면 앞뒤에 공백이 있는 상태에서 hello 인 경우만 선택됨.

#3.17 States

    element의 상태 ex) 
    :active
    - element를 클릭했을때
    :hover
    - element 위에 커서가 위치했을 때
    :focus
    - element를 키보드로 선택했을 때
    :visited
    - 링크에만 적용, 해당 링크를 방문한적이 있을 때
    :focus-within
    - 특정 부모 element의 자식 element가 focused 됐을 때

    ex) form:hover input{} - form이 hover 일때 input에 적용

#3.18 Recap

    :(콜론)이 두개인 Pseudo selector
    1) :: placeholder (0:46
    - placeholder의 특성만 바꾸고 싶을 때 사용
    2) :: selection (1:31)
    - 클릭해서 긁을 때(1:58) 발생
    3) :: first-letter
    - 첫 글자에만 적용
    4) ::first-line
    - 첫 줄에만 작용

    #combinator
    p span{} 부모자식관계
    p > span{} 부모와 바로 밑 자식관계
    p + span{} 바로 다음에 오는 형제관계
    p ~ span{} 바로 다음에 오지 않아도 되는 형제관계

    #attribute
    input[type="word"]{} type="word"인 input만을 선택
    input[type~="word"]{} "word"를 포함하는 input선택
    input[type$="word"]{} 끝에 "word"가 오는 input 선택
    input[type^="word"]{} 앞에 "word"가 오는 input 선택

    #state
    :hover 커서가 올라간상태
    :active 클릭할때
    :focus 키보드로 선택한경우
    :visited link에서 쓰이고 사이트를 방문한 이력이 있을경우
    :focus-within 자식들중 하나라도 focus상태에 있다면 부모가 바뀔때 쓰임

    #pseudo element
    ::placeholder placehoder만을 꾸밀때 사용
    ::selection 드래그 했을때
    ::first-letter 앞 글자에
    ::first-line 첫 줄

#3.19 Colors and Variables

    Color 적용 방법
    1. hexa clor code
    ex) color: #FFFFFF;
    2. rgb (red green blue)
    ex) color: rgb(255,255,255);  
    3. rgba (rgb alpha) alpha = opacity(투명도)

    :root{} 는 모든 문서의 뿌리
    
    #Variable은 --name: value; 형태로 사용, 빈 공간은 -로 채워줌
    ex) 
        root {
          --main-color: #fcce00;
        }

#4 ADVANCED CSS
#4.0 Transitions

    Transition은 어떤 상태에서 다른 상태로 변하는 애니메이션
    애니메이션을 원하는 property 이름을 transition property로 지정
    ex) transition: background-color 10s ease-in-out, color 5s ease-in-out;

    transition: all 5s ease-in-out; 을 이용하면 같은 selector 기준으로 바뀌는 것들이 모두 변경 됨
    적용할 값이 앞 트랜지션 뒤에있는 selector에 반드시 있어야함.
     ex) 
      a {
        background-color: aliceblue;
        transition: all 5s ease-in-out;
      }
      a {
        background-color: teal;
      }

#4.1 Transitions part Two

    ease-in function : 브라우저에게 변화하는 방법을 알려주는 역할
    ㄴlinear - 변화 그래프가 직선
    ㄴease-in - 시작과 끝이 빠름
    ㄴease-out - 시작과 끝이 느림
    ㄴease-in-out - 시작이 빠르고 끝이 느림

    all : 변화 요소를 한번에 다룬다.
    ㄴ따로 다루고 싶으면 각각 써주면 됨
    ex) transition: background-color 10s ease-in-out, color 5s ease-in-out;

    cubic-bezier(0, 0, 0, 0); 으로 직접 설정할수도 있다

#4.2 Transformations

    transformation
    - element를 변형시킬 수 있다. 
    - transform은 다른 페이지의 픽셀의 다른 부분에서 일어나기 때문에 element에 영향을 끼치지 않는다
    - transition을 사용해서 멋진 애니메이션으로 사용 가능. transition은 root에 있어야함

    CSS는 GPU로 작동된다

#4.3 Animations part One

    애니메이션 만드는 방법, infinite를 붙이면 연속해서 재생
      @keyframes animationName {
        from {
          transform: rotateX(0);
        }
        to {
          transform: rotateX(360);
        }
      }
      
      img {
        animation: animationName 5s ease-in-out infinite;
      }

#4.4 Animations part Two
    
    keyframes 사용 시 처음으로 돌아가지 않는 문제 해결 방법
    @keyframes animationName {
        0% {
          transform: rotateX(0);
        }
        50% {
          transform: rotateX(360);
        }
        100% {
          transform: rotateX(0);
        }
      }

      keyframes은 다른 property보다 transform으로 하는 것을 추천

#4.5 Media Queries

    Media Quary : css를 이용하여 사용자의 screen 사이즈를 알 수 있는 방법
    ex) @media screen and (max-width: 400px) {
         div { 
            background-color: wheat
            }
         } - 400px이 넘지 않는 스크린일때 div background=color 변경
        @media screen and (min-width: 300px) anc (max-width: 400px){} - 스크린 300px ~ 400px 사이일때

    browser inspect의 device toolbar를 이용하여 기기별 브라우저를 볼 수 있다.
    
    @media screen and (orientation: landscape) {} 옵션으로 가로/세로 모드 조건 확인가능
        landscape 모드 = 가로모드, portrait 모드 = 세로모드

#4.6 Media Queries Recap 

    - @media query는 코드의 조건을 추가 할 수 있는 방법이다.
    - media query도 {} 중괄호로 여닫는다.
        → 그 안에 element에 속성을 적용시켜야 한다.
    - media query는 "and"를 써서 연결된다.
    - 조건에는 "min-width" 뿐만 아니라, "min-device-width"도 있다.
        → -device-width는 오직 핸드폰에만 적용된다.

    @media print , @media screen
    - print, screen이 media type
    - print로 프린트할때 옵션을 변경할 수 있음

#6 CLONING TIME
#6.0 Introduction

    .gitignore 파일을 이용해 커밋에 포함하지 않을 파일을 쓸 수 있다.
        .DS_Store

#6.1 Sign Up Screen part One

    brower가 index.html이란 파일을 처음에 찾는다.
    <!-- text --> 로 주석 처리가능. text 뒤에서 ctrl + / 단축키

#6.2 BEM 

    BEM : Blocks, Element Modifier
    코드를 쉽게 읽기 위해서 사용하는 규칙

    BEM(Block Element Modifier) —추천 규칙
    - block : .btn {}
    - elements : .btn__price {}
    - modifiers : .btn--big {}

    한국어 정리 사이트 https://nykim.work/15

#6.3 Font Awesome

    svg file : 수학적으로 구현된 이미지 - heroicons 검색

    fontawesome 사이트 이용
    </body> 전에 추가
    <script
      src="https://kit.fontawesome.com/6478f529f2.js"
      crossorigin="anonymous"
    ></script>

#6.4 Sign Up Screen part Two

    버튼 input으로 생성
      <input type="submit" value="Log in" />

#6.5 Status Bar CSS

    <head> 에 link:css 입력 하면 css 추가 문장 자동 생성됨

    body에 font-family를 사용하여 폰트 변경 가능

    Google fonts 웹사이트에서 원하는 폰트를 가져다 쓰면 된다.
    - 사용하지 않는 스타일까지 모두 선택하면 시간이 오래 걸릴 수 있다.
    - css 에서 @import url로 추가 가능

    justify-content space-between으로 가운데가 딱 맞지 않을때 사용하는 방법 : css hack 
    1. 형제의 width 개수만큼으로 width 설정
    2. 형제 각각들을 nth-child{ justify-content: }로 정렬
    ex)
        .status-bar__column {
        width: 33%;
        }

        .status-bar__column:nth-child(2) {
        display: flex;
        justify-content: center;
        }

        .status-bar__column:last-child {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        }

    icon size는 아이콘 class이름 뒤에 fa-2x, fa-lg 등등 을 붙여주면됨

#6.6 Sign Up Screen part Three

    style.css에 reset.css 코드를 추가하면 브라우저에서 제공하는 body margin 제거 가능.
    추가로 생기는 모든 초기화 내용도 적으면 됨.
    
    width:50% 와 같이 부모에 대한 비율로 크기 설정할수 있음

#6.7 Log In Form part One

    variable.css 파일을 만들고 :root { } 내부에 변수를 설정해서 사용할 수 있다.
    변수 형식은 --variable: value;
    variable.css 파일은 반드시 style.css에 import 해주어야 함

#6.8 Log In Form part Two

    :not([ 조건 ]) 
    - 조건에 해당되지 않는 셀렉터만 pointing 가능
    ex) #login-form input:not([type="submit"]) {}

    submit 같은 tag에는 cursor: property 적용하면 좋음.

#6.9 Recap and Forms

    css 파일들을 폴더로 organize
    style.css 파일에는 font-family와 같이 모든 스크린에 적용될 수 있는걸 써놓는걸 추천

    form은 중요한 2가지 속성(attribute)을 가지고 있다. 하나는 action이고, 다른 하나는 method이다
    - action은 어떤 페이지로 data를 보낼건지 지정할 수 있다.
    - action에 적어 놓은 URL에 해당하는 파일이 반드시 존재해야한다.
    - method는 2가지 방식 중 하나를 쓸 수 있다. 하나는 POST이고, 다른 하나는 get이다.
    - POST는 백엔드 서버에 정보를 전송하는 방식이라 이번 강의에서는 사용할 수 없다.
    - get 방식은 보안에 취약하다. username이랑 password를 get 방식으로 보내선 안된다. 
        URL에 포함되어도 상관없는 정보들을 get 방식으로 보내는 것이다.

#6.10 Navigation Bar part One
    
    VSC Shorcut : 다음과 같이 입력하면 계층구조와 개수를 한번에 입력해준다
    ex) nav>ul>li*4>a 

#6.11 Navigation Bar part Two
    
    특정 element를 고정할때는 position: fixed;

#6.12 Border Box 

    CSS box의 원리
    - width 200px 박스에 패딩 50px을 주면 width를 50px을 늘려 200px을 유지하려고 한다.
    - 이때 box-sizing: border-box; property를 통해 box 크기를 유지한채 padding을 줄 수 있다.

#6.13 Navigation Bar part Three

    position: absolute; 를 사용해 element 위에 element 배치
    이때 부모 class가 position: relative; 여야 함

#6.14 Screen Header

#6.15 Friends Screen part One

#6.16 User Component part One

#6.17 User Component part Two 

#6.18 Finishing Friends Screen 


