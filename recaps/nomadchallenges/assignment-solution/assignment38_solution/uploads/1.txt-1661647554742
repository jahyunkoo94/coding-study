#7.0 회원가입
1. user모델 만들기 (user.js)
- 스키마 생성
- 스태틱 만들기
- 모델 생성 (스키마 변수받음)

2. 탬플릿 만들기
- 유저컨트롤러에서 렌더할 페이지 설정
- 렌더할 페이지 퍼그 생성
- route 설정
- get 함수 생성
- post 함수 생성 전에 form 만들기

#7.1 회원가입

1. 유저컨트롤러에 User 임폴트
2. 임폴트한 User로 postjoin 작성 ( await User.create({}) 사용)
3. 유저를 만들었으니 로그인 페이지로 가도록 리다이렉트

#7.2 비밀번호 해싱 보안
1. 해싱보안
- 해싱은 일방향 함수 절대 되돌릴수 없음
- 유저들의 원래 값은 알수없지만 해싱된값은 알기때문에 이후에 로그인해도 문제가없음
- bcrypt 사용하기 ( 해커가 해싱된 password를 가지고 하는 공격이 레인보우 테이블인데 이 레인보우테이블을 막아줄수있음)
2. user스키마에 pre를 사용
- this는 create로 생성되는 오브젝트를 말함
- bcrypt.hash(this.password, n(몇번 해싱할지) )

#7.3 Form Validation
1. 중복 검사 
- 유니크가 들어가있으면 중복 불가
- 따라서 중복이 있으면 에러가 발생

2. DB에서 에러가 나기전에 먼저 입력값을 중복체크하기
- $or로 여러조건들을 나열하기
- 비밀번호 생성 시 비밀번호 확인 폼 만들기

#7.4 Status Codes (상태코드)
1.  2로 시작하면 성공코드
2.  4로 시작하면 에러
3. render 옆에 status(400)


#7.5 로그인 파트1
1. check if account exists
2. 그간햇던거 반복이긴한데 헷갈림 exist가 어떻게 쓰이는거지

#7.6 로그인 파트2
1. check if password correct
2. 해싱된 패스워드는 항상 같은값이니까 그 둘을 비교
3. bcrypt에 내장된 compare함수 사용

#7.7 Sessions and Cookies part One
1. 유저를 기억하게 만들어보기
- 유저에게 쿠키를 보내주는것
- 세션은 백엔드와 브라우저 간에 어떤 활동을 했는지 기억하는걸 말함
2. express session 설치
3. 서버.js 설정 
-import 세션
-라우터 위에 세션 미들웨어 작성
-이제 이 미들웨어가 사이트로 들어오는 모두를 기억


#7.8 Sessions and Cookies part Two
1. 세션을 서버 재시작마다 초기화 가능함
- 나중에 백엔드가 잊지 않도록 세션을 몽고db와 연결해야함
2. 브라우저 한테 우리 백엔드 url을 방문 할 때마다 보여줘야 하는 id 카드를 주는것
- 쿠키가 이런일을 처리해줌

#7.9 Logged In User

#7.10
1. locals 를 이용
